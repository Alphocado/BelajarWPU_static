env variable sebenarnya
env.example mungkin untuk catatan bentuk env sebelum kita otak atik

.env
app_env
lingkungan pengembangan sekarang dalam proses apa

sebelum pakai laravel pastikan
> php artisan migrate
terlebih dahulu dan connect database

di migrate file ada up dan down
up = mau bikin schema (struktur tablenya)
down = menghilangkan schema yang dibikin
jika 
> php artisan migrate:rollback
akan mendown table (delete)

> php artisan migrate:fresh
down (delete) lalu di up lagi (up)

fungsi migrate untuk ketika buat secara tim


eloquent (ORM)
object relational mapper
fungsi mematakan data dari database ke dalam object
dapat dengan mudah interaksi dengan database
setiap table akan terhubung dengan model yang bisa digunakan untuk 
berinteraksi dengan table
eloquent bisa crud

active record pattern
table didalam database dibungkus ke dalam class

> php artisan tinker
dengan tinker, bisa input database tanpa ke databasenya

tinker
> $user = new App\Models\User
> $user->name = 'nama'
> $user->email = 'email'
> $user->password = bcrypt('00000')
> $user->save() -- simpan
> $user->all() -- tampilkan semua
> $user->first() -- tampilkan yang pertama
> $user->find(0) -- tampilkan yang dicari
> $user->findOrFail(0) -- tampilkan yang dicari, jika tidak ketemu
                          tampilkan error

cara membuat migrate
> php artisan make:migrate nama-file
cara up ke database
> php artisan migrate
cara kembali sebelum migrate
> php artisan migrate:rollback
hapus semua tabel lalu migrate kirim ulang
> php artisan migrate:fresh


cara membuat model
> php artisan make:model nama-model
kalau mau buat model + migrate bersamaan
> php artisan make:model -m <nama>

cara pakai tinker
1.  atur database di env
2.  buat database dan table di dalamnya 
3.  buat model di laravel dengan nama yang sama dengan nama model
    yang mau diinput
4.  buka terminal dan masuk tinker 
    > php artisan tinker
5.  connect
    > $nama-model-table = new nama-model-table
6.  input, contoh
    > $road = new App\Models\Road();
    > $road->column1 = 'Value1';
    > $road->column2 = 'Value2';
7.  save dan input ke database
    > $road->save() 

tinker
menampilkan semuanya
> $road::all()
menampilkan 1 berdasarkan id
> $road::find(<id>)

kenapa, bisa input dan muncul secara normal di halaman?
karena datanya disimpan dalam bentuk "object" di Post.php (walaupun tidak terlihat)
dan di PostController ada command yang sesuai dengan tinker,
jadi tinggal panggil tinker di PostController


kalau semisal tidak mau input melalui terminal tetapi melalui code
> Post::create()
bisa sekaligus memasukkan semua data, contoh
> Post::create([
  'title' => 'Judul ke empat',
  'excerpt' => '...',
  'body' => '...'
])

post::create([
  'name' => 'Personal',
  'slug' => 'personal'
])

tapi tidak bisa langsung, harus tambahkan variable protected $fillable di model

seeder/seeding (biji)
membuat data dummy di database

membuat seeder
> php artisan make:seeder <nama-seeder>

execute seeder
> php artisan db:seed

bisa temukan seeder di App/database/seeders/DatabaseSeeder.php
disitu kita bisa sediakan input untuk database 

semisal ada databaru ditambahkan di seeder file tetapi saat mau execute tidak bisa
commandnya
> php artisan migrate:fresh --seed


jika semisal ada table bernama post user dan category
table post punya foreign key dengan 2 table lainnya
semisal konek post dengan user

post harus punya 1 user 
user bisa punya banyak post
jadi one to many

cara agar bisa menampilkan adalah
- ke file modelsnya postnya
- buat function baru dengan nama user
- didalam table user return belongsto User::class, jadi hanya bisa punya 1 user
- ke file model User
- tambahkan function baru dengan nama post
- tambahkan return hasMany Post::class, jadi bisa banyak


factory, pabrik pembuat data palsu 
pasti saat membuat database diperlukan isi data untuk testing
daripada isi secara manual
laravel bisa memasukkan data

faker library itu akan mengenerate data yang kita butuhkan
bisa juga kostum bahasa
ke App/Config/app.php
faker lalu ubah jadi
> 'faker_locale' => env('FAKER_LOCALE', 'en_US'),
lalu ke .env, tambahkan
> FAKER_LOCALE=id_ID


cara membuat factory
> php artisan make:factory <nama>
jadi bisa buat data random yang bisa diatur isinya

dengan factory tidak perlu cape cape isi data di tinker

cara cepat jika mau buat model, migrate, factory, dan seed
> php artisan make:model Student -mfs


N+1 problem
terjadi ketika aplikasi mengambil data dari database
didalamnya melakukan looping terhadap data, artinya
memanggil database berulang ulang akan ada masalah
di looping bagian view, jika terjadi terus yang
ada melambatkan performa

pakai eager loading untuk mengatasi N+1 problem
eager loading bagus jika ada data yang 
foreign key ke table lain

sebelum
> Book::all();
sesudah 
> $books = Book::with('author')->get();
kalau query yang mau diambil lebih dari 1?
> $books = Book::with(['author','publisher'])->get()

contoh code di folder ini
sebelum
> "posts" => Post::latest()->get()
sesudah
> "posts" => Post::with(['author', 'category'])->latest()->get()

jika dalam routes model binding? 
pakai lazy eager loading


NOTE:
post dan posts beda
posts kumpulan post yang ada
post tampilkan khusus satu post


ada yg namanya method request()
kegunaanya untuk menangkap method get


@csrf
proteksi input form

semisal di view ada form dan formnya diberi method post
bisa ada perubahan menampilkan view di web.php
> Route::get('/register', [RegisterController::class, 'index']);
> Route::post('/register', [RegisterController::class, 'store']);
yang atas dan yang bawah beda
yang atas bisa diakses dengan get atau link
sedangkan yang bawa hanya bisa diakses dengan form saja
tidak bisa dari link

bisa validasi form
> public function store(Request $request)
  {
    $request->validate([
      'name' => 'required|max:255',
      'username' => ['required', 'min:3', 'max:255', 'unique:users'],
      'email' => 'required|email|unique:users',
      'password' => 'required|min:5|max:255'
    ]);
  }

semisal ada error saat input (setelah validasi)
> <div class="form-floating">
    <input type="text" class="form-control rounded-top @error('name') is-invalid @enderror" id="name" placeholder="name@example.com" name="name">
    <label for="name">Name</label>
    
    @error('name')
    <div class="invalid-feedback">
      {{ $message }}
    </div>
    @enderror
  </div>
bisa seperti ini untuk atur errornya

agar saat terjadi error valuenya tetap, bisa
di dalam inputnya tambahkan
> value="{{ old('email') }}"
contoh panjang
> <input type="text" class="form-control @error('email') is-invalid @enderror" id="email" placeholder="email" name="email" value="{{ old('email') }}">

pastikan sebelum input di modelnya bagian fillable diisikan
sesuai dengan inputnya
> protected $fillable = [
    'name',
    'username',
    'email',
    'password',
  ];
arti code diatas adalah bagian yang bisa diisi ke database
jika sebaliknya? bagian yang tidak boleh diisi ke database
> protected $guarded = ['id'];

untuk enkripsi password bisa dengan cara 1:
> $validatedData['password'] = bcrypt($validatedData['password']);
cara 2:
import dulu
> use Illuminate\Support\Facades\Hash;
lalu pakai
> $validatedData['password'] = Hash::make($validatedData['password']);

kalau mau kasih notif jika register berhasil
> $request->session()->flash('success', 'Registration successfull');



dua cara membuat view ada 2 tipe

langsung view
> Route::get('/about', function () {
  return view('about', [
    "title" => "About",
    'active' => 'about',
    "name" => "alphocado",
    "email" => "raylienardy@gmail.com",
    "image" => "profile.jpg"
  ]);
});

pakai controller
Route::get('/blogs', [PostController::class, 'index']);
kalau controller begini penjelasannya
- kalau url adalah /blos, maka lakukan ini
- ambil file controlller (postcontroller)
- disitu ambil method index 
- di method index biasanya berakhir dengan
> return view
untuk menampilkan UI


middleware
untuk membedakan yang mana sudah login atau belum
> Route::get('/login', [LoginController::class, 'index'])->middleware('guest');

artinya, yang belum login masuk ke sini
auth dan middleware sangat berkaitan satu sama lain

disuatu page biasa, kan biasanya ada tuh yang kanan atas gambar login
ada yang masih belum ada yang sudah, cara ceknya sepert ini 
> @auth
    TODO
  @else
    TODO
  @endauth

auth akan mengecek apakah sudah login atau belum


untuk logout bisa dengan ini
> Route::post('/logout', [LoginController::class, 'logout']);
karna post bisa jadi cara aksesnya dengan form

di controllernya seperti ini
> public function logout()
  {
    Auth::logout();
    request()->session()->invalidate();
    request()->session()->regenerateToken();
    return redirect('/');
  }

ini akan menghapus semua sesi logout dan buat ulang

agar hanya user yang sudah login bisa masuk
> Route::get('/dashboard', [DashboardController::class, 'index'])->middleware('auth');