env variable sebenarnya
env.example mungkin untuk catatan bentuk env sebelum kita otak atik

.env
app_env
lingkungan pengembangan sekarang dalam proses apa

sebelum pakai laravel pastikan
> php artisan migrate
terlebih dahulu dan connect database

di migrate file ada up dan down
up = mau bikin schema (struktur tablenya)
down = menghilangkan schema yang dibikin
jika 
> php artisan migrate:rollback
akan mendown table (delete)

> php artisan migrate:fresh
down (delete) lalu di up lagi (up)

fungsi migrate untuk ketika buat secara tim


eloquent (ORM)
object relational mapper
fungsi mematakan data dari database ke dalam object
dapat dengan mudah interaksi dengan database
setiap table akan terhubung dengan model yang bisa digunakan untuk 
berinteraksi dengan table
eloquent bisa crud

active record pattern
table didalam database dibungkus ke dalam class

> php artisan tinker
dengan tinker, bisa input database tanpa ke databasenya

tinker
> $user = new App\Models\User
> $user->name = 'nama'
> $user->email = 'email'
> $user->password = bcrypt('00000')
> $user->save() -- simpan
> $user->all() -- tampilkan semua
> $user->first() -- tampilkan yang pertama
> $user->find(0) -- tampilkan yang dicari
> $user->findOrFail(0) -- tampilkan yang dicari, jika tidak ketemu
                          tampilkan error

cara membuat migrate
> php artisan make:migrate nama-file
cara up ke database
> php artisan migrate
cara kembali sebelum migrate
> php artisan migrate:rollback
hapus semua tabel lalu migrate kirim ulang
> php artisan migrate:fresh


cara membuat model
> php artisan make:model nama-model
kalau mau buat model + migrate bersamaan
> php artisan make:model -m <nama>

cara pakai tinker
1.  atur database di env
2.  buat database dan table di dalamnya 
3.  buat model di laravel dengan nama yang sama dengan nama model
    yang mau diinput
4.  buka terminal dan masuk tinker 
    > php artisan tinker
5.  connect
    > $nama-model-table = new nama-model-table
6.  input, contoh
    > $road = new App\Models\Road();
    > $road->column1 = 'Value1';
    > $road->column2 = 'Value2';
7.  save dan input ke database
    > $road->save() 

tinker
menampilkan semuanya
> $road::all()
menampilkan 1 berdasarkan id
> $road::find(<id>)

kenapa, bisa input dan muncul secara normal di halaman?
karena datanya disimpan dalam bentuk "object" di Post.php (walaupun tidak terlihat)
dan di PostController ada command yang sesuai dengan tinker,
jadi tinggal panggil tinker di PostController


kalau semisal tidak mau input melalui terminal tetapi melalui code
> Post::create()
bisa sekaligus memasukkan semua data, contoh
> Post::create([
  'title' => 'Judul ke empat',
  'excerpt' => '...',
  'body' => '...'
])

post::create([
  'name' => 'Personal',
  'slug' => 'personal'
])

tapi tidak bisa langsung, harus tambahkan variable protected $fillable di model

seeder/seeding (biji)
membuat data dummy di database

membuat seeder
> php artisan make:seeder <nama-seeder>

execute seeder
> php artisan db:seed

bisa temukan seeder di App/database/seeders/DatabaseSeeder.php
disitu kita bisa sediakan input untuk database 

semisal ada databaru ditambahkan di seeder file tetapi saat mau execute tidak bisa
commandnya
> php artisan migrate:fresh --seed


jika semisal ada table bernama post user dan category
table post punya foreign key dengan 2 table lainnya
semisal konek post dengan user

post harus punya 1 user 
user bisa punya banyak post
jadi one to many

cara agar bisa menampilkan adalah
- ke file modelsnya postnya
- buat function baru dengan nama user
- didalam table user return belongsto User::class, jadi hanya bisa punya 1 user
- ke file model User
- tambahkan function baru dengan nama post
- tambahkan return hasMany Post::class, jadi bisa banyak